!function(e,n){if("function"==typeof define&&define.amd)define(["exports"],n);else if("undefined"!=typeof exports)n(exports);else{var r={exports:{}};n(r.exports),e.unknown=r.exports}}(this,(function(e){var n,r,a;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,function(e){var n,r=Object.prototype,a=r.hasOwnProperty,t="function"==typeof Symbol?Symbol:{},o=t.iterator||"@@iterator",i=t.asyncIterator||"@@asyncIterator",s=t.toStringTag||"@@toStringTag",d="object"==typeof module,c=e.regeneratorRuntime;if(c)d&&(module.exports=c);else{(c=e.regeneratorRuntime=d&&module.exports||{}).wrap=b;var l="suspendedStart",u="suspendedYield",f="executing",p="completed",m={},h={};h[o]=function(){return this};var _=Object.getPrototypeOf,S=_&&_(_(K([])));S&&S!==r&&a.call(S,o)&&(h=S);var g=B.prototype=v.prototype=Object.create(h);L.prototype=g.constructor=B,B.constructor=L,B[s]=L.displayName="GeneratorFunction",c.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===L||"GeneratorFunction"===(n.displayName||n.name))},c.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,B):(e.__proto__=B,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(g),e},c.awrap=function(e){return{__await:e}},O(C.prototype),C.prototype[i]=function(){return this},c.AsyncIterator=C,c.async=function(e,n,r,a){var t=new C(b(e,n,r,a));return c.isGeneratorFunction(n)?t:t.next().then((function(e){return e.done?e.value:t.next()}))},O(g),g[s]="Generator",g[o]=function(){return this},g.toString=function(){return"[object Generator]"},c.keys=function(e){var n=[];for(var r in e)n.push(r);return n.reverse(),function r(){for(;n.length;){var a=n.pop();if(a in e)return r.value=a,r.done=!1,r}return r.done=!0,r}},c.values=K,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(x),!e)for(var r in this)"t"===r.charAt(0)&&a.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function t(a,t){return s.type="throw",s.arg=e,r.next=a,t&&(r.method="next",r.arg=n),!!t}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return t("end");if(i.tryLoc<=this.prev){var d=a.call(i,"catchLoc"),c=a.call(i,"finallyLoc");if(d&&c){if(this.prev<i.catchLoc)return t(i.catchLoc,!0);if(this.prev<i.finallyLoc)return t(i.finallyLoc)}else if(d){if(this.prev<i.catchLoc)return t(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return t(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var t=this.tryEntries[r];if(t.tryLoc<=this.prev&&a.call(t,"finallyLoc")&&this.prev<t.finallyLoc){var o=t;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=n,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(i)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),m},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),x(r),m}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===e){var a=r.completion;if("throw"===a.type){var t=a.arg;x(r)}return t}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,a){return this.delegate={iterator:K(e),resultName:r,nextLoc:a},"next"===this.method&&(this.arg=n),m}}}function b(e,n,r,a){var t=n&&n.prototype instanceof v?n:v,o=Object.create(t.prototype),i=new A(a||[]);return o._invoke=function(e,n,r){var a=l;return function(t,o){if(a===f)throw new Error("Generator is already running");if(a===p){if("throw"===t)throw o;return M()}for(r.method=t,r.arg=o;;){var i=r.delegate;if(i){var s=w(i,r);if(s){if(s===m)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===l)throw a=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=f;var d=E(e,n,r);if("normal"===d.type){if(a=r.done?p:u,d.arg===m)continue;return{value:d.arg,done:r.done}}"throw"===d.type&&(a=p,r.method="throw",r.arg=d.arg)}}}(e,r,i),o}function E(e,n,r){try{return{type:"normal",arg:e.call(n,r)}}catch(e){return{type:"throw",arg:e}}}function v(){}function L(){}function B(){}function O(e){["next","throw","return"].forEach((function(n){e[n]=function(e){return this._invoke(n,e)}}))}function C(e){function n(r,t,o,i){var s=E(e[r],e,t);if("throw"!==s.type){var d=s.arg,c=d.value;return c&&"object"==typeof c&&a.call(c,"__await")?Promise.resolve(c.__await).then((function(e){n("next",e,o,i)}),(function(e){n("throw",e,o,i)})):Promise.resolve(c).then((function(e){d.value=e,o(d)}),(function(e){return n("throw",e,o,i)}))}i(s.arg)}var r;this._invoke=function(e,a){function t(){return new Promise((function(r,t){n(e,a,r,t)}))}return r=r?r.then(t,t):t()}}function w(e,r){var a=e.iterator[r.method];if(a===n){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=n,w(e,r),"throw"===r.method))return m;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var t=E(a,e.iterator,r.arg);if("throw"===t.type)return r.method="throw",r.arg=t.arg,r.delegate=null,m;var o=t.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=n),r.delegate=null,m):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,m)}function y(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function x(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(y,this),this.reset(!0)}function K(e){if(e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var t=-1,i=function r(){for(;++t<e.length;)if(a.call(e,t))return r.value=e[t],r.done=!1,r;return r.value=n,r.done=!0,r};return i.next=i}}return{next:M}}function M(){return{value:n,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")());var t=[],o={};let i;function s(e){a=e,i||(i=a.subscribeMessage("sprite2robotBroadcast",(function(e){!function(e,n){var a=[255,85,0,0,1,70,1,0],t=8,o=e.length;a[7]=o;for(var i=0;i<o;i++)a[t]=e[i].charCodeAt(0),t++;if(null!=n){a[6]=2;var s=String(n).length;for(a[t++]=s,i=0;i<s;i++)a[t++]=String(n)[i].charCodeAt(0)}a[2]=t-3,r&&r.writeRaw(Uint8Array.from(a))}(e.msg,e.value)})))}function d(e){var n=function(e){var n=function(e){for(var n=new Uint8Array(e),r=[],a=0;a<n.length;a++)r.push(n[a]);return r}(e),r=t=t.concat(n),a=f(r);if(-1===a)return;t=r.slice(a);return function(){var e=[];for(;t.length>=4;){var n=f(t),r=p(t);if(-1===n||-1===r||r<n)break;var a=t.slice(n+2,r);a.length>=c&&console.warn("receive buffer overflow!"),e.push(a),t=t.slice(r+2)}return e.length>0?e:null}()}(e);n&&n.forEach((function(e){if(e[0]==e.length-1&&70===e[3]){let n=function(e){if(1==e[4]){var n=e[5],r=e.slice(6,6+n),a="";r.map((function(e){a+=String.fromCharCode(e)})),o[a]=""}else if(2==e[4]){n=e[5],r=e.slice(6,6+n),a="";r.map((function(e){a+=String.fromCharCode(e)}));var t=e[6+n],i=e.slice(6+n+1,6+n+1+t),s="";i.map((function(e){s+=String.fromCharCode(e)})),o[a]=s}else if(3==e[4])return{type:"cmd",msg:"threadFinish"};return{msg:a,value:s||""}}(e);a.sendMessage("robot2spriteBroadcast",n)}}))}var c=36,l=[255,85],u=[13,10];function f(e){return Array.isArray(e)?e.findIndex((function(n,r){return a=n,t=e[r+1],a===l[0]&&t===l[1];var a,t})):-1}function p(e){return Array.isArray(e)?e.findIndex((function(n,r){return a=n,t=e[r+1],a===u[0]&&t===u[1];var a,t})):-1}const m={debug:["arduino_broadcast.BLOCK_1546412605792","arduino_broadcast.BLOCK_1546413597853","arduino_broadcast.BLOCK_1546413700881","arduino_broadcast.BLOCK_1546415356012"],upload:[]},h=[],_=async(e,n)=>{try{if(n&&n.workspace){"debug"===e?(n.workspace.enableBlocks(...m.upload),n.workspace.disableBlocks(...m.debug)):"upload"===e?(n.workspace.enableBlocks(...m.debug),n.workspace.disableBlocks(...m.upload)):(n.workspace.enableBlocks(...m.upload),n.workspace.enableBlocks(...m.debug));const r=n.getService("account");await r.isLogin()||n.workspace.disableBlocks(...h)}}catch(e){console.warn(e)}};const S={zh:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},en:{arduino_broadcast:"Upload Mode Broadcast",extensionName:"Upload Mode Broadcast",extensionDescription:"By adding this extension, you enable a device to interact with a sprite in the Upload Mode.",BLOCK_1546412605792:"send upload mode message [MESSAGE] ",BLOCK_1546413597853:"send upload mode message [MESSAGE] with value [VALUE] ",BLOCK_1546413700881:"when receiving upload mode message [MESSAGE] ",BLOCK_1546415356012:"upload mode message value",cate_d9ae47fa:"Upload Mode Broadcast"},de:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},es:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},fr:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},id:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},ja:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},"ja-jph":{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},ko:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},pl:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},uk:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},"zh-hant":{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},nl:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},it:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},hr:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},ru:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},pt:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},fi:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},tr:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"},tk:{arduino_broadcast:"上传模式广播",extensionName:"上传模式广播",extensionDescription:"通过上传模式广播，可以让支持该功能的设备和舞台角色在上传模式下产生互动",BLOCK_1546412605792:"发送上传模式广播 [MESSAGE] ",BLOCK_1546413597853:"发送上传模式广播 [MESSAGE] 并附加值 [VALUE] ",BLOCK_1546413700881:"当接收上传模式广播 [MESSAGE] ",BLOCK_1546415356012:"上传模式广播的附加值",cate_d9ae47fa:"上传模式广播"}},g={arduinoc:{}},b=[{lang:"arduinoc",template:"//( include //)\n\n//( lib //)\n\n//({\n    this.$ALL_VARIABLES.length==0?'':this.$ALL_VARIABLES.map(v=>\"float \"+v+\" = 0;\").join('\\n')\n}//)\n\n//( declare //)\n\nvoid _delay(float seconds) {\n  long endTime = millis() + seconds * 1000;\n  while(millis() < endTime) _loop();\n}\n\n//(\nvoid setup() {\n  //( setup //)\n  //( code //)\n}\n//)\n\nvoid _loop() {\n  //( _loop //)\n}\n\nvoid loop() {\n  //( loop //)\n  _loop();\n}\n// test",splitor:{frame:{left:"//(",right:"//)"},expression:{left:"/*{",right:"}*/"}},reducers:[{name:"include",reduce:e=>{let n=[];for(let r of e){let e="";"string"==typeof r?e=r:"function"==typeof r&&(e=r()),-1===n.indexOf(e)&&n.push(e)}if(0!==n.length)return n.map((e=>"#include "+e)).join("\n")+"\n"}}]}],E={arduino:[{filename:"src/OfflineBroadcast.cpp",code:'#include "OfflineBroadcast.h"\nunsigned char prevc;\nbyte index = 0;\nbyte dataLen;\nbool isAvailable,isStart;\nuint8_t command_index = 0;\nchar serialRead;\nchar buffer[52];\n#define MAX_LISTENER 10\n\nstruct Listener\n{\n    String msg;\n    void (*callback)(void);\n};\nstruct Listener listenList[20];\nint listenerP=0;\nOfflineBroadcast::OfflineBroadcast(void)\n{}\nvoid OfflineBroadcast::readSerial(){\n  isAvailable = false;\n  if(Serial.available()>0){\n    isAvailable = true;\n    serialRead = Serial.read();\n  }\n}\nunsigned char OfflineBroadcast::readBuffer(int index){\n return buffer[index]; \n}\nvoid OfflineBroadcast::loop()\n{\n\treadSerial();\n  if(isAvailable){\n\tunsigned char c = serialRead&0xff;\n\tif(c==0x55&&isStart==false){\n\t if(prevc==0xff){\n\t  index=1;\n\t  isStart = true;\n\t }\n\t}else{\n\t  prevc = c;\n\t  if(isStart){\n\t\tif(index==2){\n\t\t dataLen = c; \n\t\t}else if(index>2){\n\t\t  dataLen--;\n\t\t}\n\t\twriteBuffer(index,c);\n\t  }\n\t}\n\t index++;\n\t if(index>51){\n\t  index=0; \n\t  isStart=false;\n\t }\n\t if(isStart&&dataLen==0&&index>3){ \n\t\tisStart = false;\n\t\tparseData(); \n\t\tindex=0;\n\t }\n  }\n}\nvoid OfflineBroadcast::broadcast( String msg){\n  uint8_t arr[50]={0,0,1,0x46,1,1};\n  int len = msg.length();\n  int size = 6;\n  if(len==0){\n    return;\n  }\n  arr[5] = len;\n\tfor(int i=0;i<len;i++){\n    \tarr[size] = uint8_t(msg[i]);\n    \tsize++;\n  }\n  arr[0] = size-1;\n  writeHead();\n  for(int i=0;i<size;i++)\n  {\n    writeSerial(arr[i]);\n  }\n  writeEnd();\n  delay(100);\n}\nvoid OfflineBroadcast::broadcast(String msg,String value){\n  uint8_t arr[50]={0,0,1,0x46,2,1};\n  int len = msg.length();\n  if(len==0){\n    return;\n  }\n  int len2 = value.length();\n  int size = 6;\n  arr[5] = len;\n  for(int i=0;i<len;i++){\n      arr[size] = uint8_t(msg[i]);\n      size++;\n  }\n  arr[size++] = len2;\n  for(int i=0;i<len2;i++){\n      arr[size++] = uint8_t(value[i]);\n  }\n  arr[0] = size-1;\n  writeHead();\n  for(int i=0;i<size;i++)\n  {\n    writeSerial(arr[i]);\n  }\n  writeEnd();\n  delay(100);\n}\n\nvoid OfflineBroadcast::readSensor(int device){\n   /**************************************************\n      ff    55      len idx action device type len name  \n      0     1       2   3   4      5      6    7    8\n      0xff  0x55   0x4 0x3 0x1    0x46    0x1  0x2  48 69\n      -----------------------------------------------\n      ff    55      len idx action device type len name len message\n      0   1   2 3 4   5   6 7 8 9 10\n  ***************************************************/\n  int type;\n  switch(device){\n    case  BROADCAST:{\n      type = readBuffer(6);\n      // 无附加值\n      if(type==1){\n        int len = readBuffer(7);\n        broadcastMsg = readString(8,len); \n        broadcastValue = "";\n      }\n      // 有附加值\n      else if(type==2){\n        int nlen = readBuffer(7);\n        broadcastMsg = readString(8,nlen);\n        int vlen = readBuffer(7+nlen+1);\n        broadcastValue = readString(7+nlen+2,vlen);\n      }\n      bool hasCallback = false;\n      for(int i=0;i<MAX_LISTENER;i++){\n        if(broadcastMsg.equals(listenList[i].msg)){\n          listenList[i].callback();\n          hasCallback = true;\n        }\n      } \n      if(!hasCallback){\n        callOK();\n      }\n    }\n    break;\n  }\n}\nvoid OfflineBroadcast::parseData(){\n  isStart = false;\n  int idx = readBuffer(3);\n  command_index = (uint8_t)idx;\n  int action = readBuffer(4);\n  int device = readBuffer(5);\n  switch(action){\n    case GET:{\n        readSensor(device);\n     }\n     break;\n  }\n}\n\nvoid OfflineBroadcast::writeBuffer(int index,unsigned char c){\n  buffer[index]=c;\n}\nvoid OfflineBroadcast::writeHead(){\n  writeSerial(0xff);\n  writeSerial(0x55);\n}\nvoid OfflineBroadcast::writeEnd(){\n Serial.println(); \n}\nvoid OfflineBroadcast::writeSerial(unsigned char c){\n Serial.write(c);\n}\nchar _receiveStr[20] = {};\nuint8_t _receiveUint8[16] = {};\nString OfflineBroadcast::readString(int idx,int len){\n  char p[50];\n  for(int i=0;i<len;i++){\n    p[i]=readBuffer(idx+i);\n  }\n  p[len] = \'\\0\';\n  return String(p);\n}\nvoid OfflineBroadcast::callOK(){\n    uint8_t arr[5]={4,0,1,0x46,3};\n    writeHead();\n    for(int i=0;i<5;i++)\n    {\n      writeSerial(arr[i]);\n    }\n    writeEnd();\n}\nvoid OfflineBroadcast::on(String msg,void(*callback)(void)){\n  struct Listener listener;\n  listener.msg = msg;\n  listener.callback = callback;\n  if(listenerP<MAX_LISTENER){\n    listenList[listenerP++] = listener;\n  }\n}\r\n'},{filename:"src/OfflineBroadcast.h",code:'#ifndef OfflineBoardcast_H\n#define OfflineBoardcast_H\n#include "MeSerial.h"\n#include <Arduino.h>\n\n#define BROADCAST 70\n#define GET 1\n\nclass OfflineBroadcast\n{\npublic:\n\tOfflineBroadcast(void);\n\tvoid loop();\n\tString broadcastMsg = "";\n\tString broadcastValue = "";\n\tvoid broadcast(String msg,String value);\n  void broadcast(String msg);\n  void callOK();\n  void on(String msg,void(*callback)(void));\nprivate:\n  void readSensor(int device);\n  unsigned char readBuffer(int index);\n  void writeBuffer(int index,unsigned char c);\n  void parseData();\n  void writeEnd();\n  void writeSerial(unsigned char c);\n  void readSerial();\n  String readString(int idx,int len);\n  void writeHead();\n};\n#endif\r\n'}]},v={async onLoad(e,r){const a=e.getService("account");if(a){await a.isLogin()||e.workspace.disableBlocks(...h),a.onLogin((()=>{e.workspace.enableBlocks(...h)})),a.onLogout((()=>{e.workspace.disableBlocks(...h)}))}r&&"function"==typeof r.isUploadMode&&_(r.isUploadMode()?"upload":"debug",e),s(e),r.tar.name?n=r.tar.name:r.tar.sprite&&(n=r.tar.sprite.name)},onUnload(e,n){i&&i(),i=null},onConnect(e,n){},onDisconnect(e,n){},onStopAll(e,n){},beforeChangeUploadMode:async(e,n)=>!0,beforeChangeDebugMode:async(e,n)=>!0,afterChangeUploadMode:(e,n)=>(_("upload",e),!0),afterChangeDebugMode:(e,n)=>(_("debug",e),!0),onSelect(e,a){r=a,setTimeout((()=>{_(a.isUploadMode()?"upload":"debug",e)}),0),a.tar.sprite&&(n=a.tar.sprite.name)},onUnselect(e,n){_("",e)},beforeCodeUpload(e,n){},afterCodeUpload(e,n){},onRead(e,n){r=n,d(n.readRaw(!0))}};var L=class{constructor(){this.checkFirmwareInForce="undefined"!=typeof checkFirmwareInForce&&checkFirmwareInForce,this.funcs={block1546412605792CodesLoop:["broadcaster.loop();"],BLOCK_1546412605792:{onRun:(e,n,r,a)=>{}},block1546413597853CodesLoop:["broadcaster.loop();"],BLOCK_1546413597853:{onRun:(e,n,r,a)=>{}},block1546413700881CodesLib:e=>n.includes("mcore")?["#include <MeMCore.h>"]:n.includes("auriga")?["#include <MeAuriga.h>"]:["#include <Arduino.h>"],block1546413700881CodesDeclare:["OfflineBroadcast broadcaster;","void broadcastHandler/*{$INDEX}*/(){\n  /*{$BRANCH}*/\n  broadcaster.callOK();\n}"],block1546413700881CodesLoop:["broadcaster.loop();"],BLOCK_1546413700881:{onRun:(e,n,r,a)=>{},onAdd:(e,n,r)=>{},onRemove:(e,n,r)=>{}},block1546415356012CodesLoop:["broadcaster.loop();"],BLOCK_1546415356012:{onRun:(e,n,r,a)=>{},onMonitor:(e,n,r)=>{}}}}getInfo(){return{id:"arduino_broadcast",targets:[{name:"mcore",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}]}}},{name:"auriga",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}]}}},{name:"arduino_uno",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}]}}},{name:"arduino_mega2560",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}]}}},{name:"megapipro",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}]}}},{name:"megapi",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}]}}},{name:"orion",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}]}}},{name:"vietduino_uno_2019",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"kocoafab_orangeboard",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"alphaco",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"eduino_board",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"monco",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"monco_board",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"arduino_nano",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"arduino_nano_old",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"xduino_uno",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"megapi_robot",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"ezmaker_s1_maker_board",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"educabot_uno",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"pinoo_dev",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"pinoo_dev_nano_old",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"brain_go",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"r_e_x_v1",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"orangeboardwifi",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"ezsteam_v1",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"ladybugv1a",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}},{name:"ladybug_beta",options:{upload:{middlewares:[{name:"arduino",params:{sources:E.arduino}}],driver:{}}}}],codeTypes:["arduinoc"],version:"0.1.15",platform:["mblockpc","mblockweb"],categories:[{name:"cate_d9ae47fa",colors:["#6886C4","#5275BC","#4366AD"],menuIconURI:"",blockIcon:{type:"image",width:28,height:26,src:window.MbApi.getExtResPath("arduino_broadcast/imgs/2fd59a2aa3514c44b57327a22f5ac44f.svg","arduino_broadcast")},blocks:[{opcode:"BLOCK_1546412605792",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{MESSAGE:{type:"string",defaultValue:"message"}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:"broadcaster.broadcast(String(/*{MESSAGE}*/));",sections:{include:['"src/OfflineBroadcast.h"'],declare:"OfflineBroadcast broadcaster;",setup:"Serial.begin(115200);",_loop:this.funcs.block1546412605792CodesLoop}}},handler:this.funcs.BLOCK_1546412605792},{opcode:"BLOCK_1546413597853",blockType:"command",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{MESSAGE:{type:"string",defaultValue:"message"},VALUE:{type:"string",defaultValue:"1",checkNumber:!0}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:"broadcaster.broadcast(String(/*{MESSAGE}*/),String(/*{VALUE}*/));",sections:{include:['"src/OfflineBroadcast.h"'],declare:"OfflineBroadcast broadcaster;",setup:"Serial.begin(115200);",_loop:this.funcs.block1546413597853CodesLoop}}},handler:this.funcs.BLOCK_1546413597853},{opcode:"BLOCK_1546413700881",blockType:"hat",checkboxInFlyout:!1,hidden:!1,gap:12,arguments:{MESSAGE:{type:"string",defaultValue:"message"}},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:"broadcaster.on(String(/*{MESSAGE}*/),broadcastHandler/*{$INDEX}*/);",sections:{include:['"src/OfflineBroadcast.h"'],lib:this.funcs.block1546413700881CodesLib,declare:this.funcs.block1546413700881CodesDeclare,setup:"Serial.begin(115200);",_loop:this.funcs.block1546413700881CodesLoop}}},handler:this.funcs.BLOCK_1546413700881},{opcode:"BLOCK_1546415356012",blockType:"string",checkboxInFlyout:!1,hidden:!1,gap:36,arguments:{},branchCount:0,platform:["mblockpc","mblockweb"],codes:{arduinoc:{code:"broadcaster.broadcastValue",sections:{include:['"src/OfflineBroadcast.h"'],declare:"OfflineBroadcast broadcaster;",setup:"Serial.begin(115200);",_loop:this.funcs.block1546415356012CodesLoop}}},handler:this.funcs.BLOCK_1546415356012}],menus:{}}],generators:b,translationMap:S,snippets:g,generatorStartBlocks:["BLOCK_1546413700881"],feature:[],mustLoginBlocks:[],disabledOffline:[],disabledOnline:["arduino_broadcast.BLOCK_1546412605792","arduino_broadcast.BLOCK_1546413597853","arduino_broadcast.BLOCK_1546413700881","arduino_broadcast.BLOCK_1546415356012"]}}getHandler(){return"object"==typeof v?v:"function"==typeof v?new v:void 0}};e.default=L}));