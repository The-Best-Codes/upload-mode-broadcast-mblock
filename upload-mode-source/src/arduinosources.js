export default [
    "{ filename: \"src/OfflineBroadcast.cpp\", code: \"#include \\\"OfflineBroadcast.h\\\"\\nunsigned char prevc;\\nbyte index = 0;\\nbyte dataLen;\\nbool isAvailable,isStart;\\nuint8_t command_index = 0;\\nchar serialRead;\\nchar buffer[52];\\n#define MAX_LISTENER 10\\n\\nstruct Listener\\n{\\n    String msg;\\n    void (*callback)(void);\\n};\\nstruct Listener listenList[20];\\nint listenerP=0;\\nOfflineBroadcast::OfflineBroadcast(void)\\n{}\\nvoid OfflineBroadcast::readSerial(){\\n  isAvailable = false;\\n  if(Serial.available()>0){\\n    isAvailable = true;\\n    serialRead = Serial.read();\\n  }\\n}\\nunsigned char OfflineBroadcast::readBuffer(int index){\\n return buffer[index]; \\n}\\nvoid OfflineBroadcast::loop()\\n{\\n\\treadSerial();\\n  if(isAvailable){\\n\\tunsigned char c = serialRead&0xff;\\n\\tif(c==0x55&&isStart==false){\\n\\t if(prevc==0xff){\\n\\t  index=1;\\n\\t  isStart = true;\\n\\t }\\n\\t}else{\\n\\t  prevc = c;\\n\\t  if(isStart){\\n\\t\\tif(index==2){\\n\\t\\t dataLen = c; \\n\\t\\t}else if(index>2){\\n\\t\\t  dataLen--;\\n\\t\\t}\\n\\t\\twriteBuffer(index,c);\\n\\t  }\\n\\t}\\n\\t index++;\\n\\t if(index>51){\\n\\t  index=0; \\n\\t  isStart=false;\\n\\t }\\n\\t if(isStart&&dataLen==0&&index>3){ \\n\\t\\tisStart = false;\\n\\t\\tparseData(); \\n\\t\\tindex=0;\\n\\t }\\n  }\\n}\\nvoid OfflineBroadcast::broadcast( String msg){\\n  uint8_t arr[50]={0,0,1,0x46,1,1};\\n  int len = msg.length();\\n  int size = 6;\\n  if(len==0){\\n    return;\\n  }\\n  arr[5] = len;\\n\\tfor(int i=0;i<len;i++){\\n    \\tarr[size] = uint8_t(msg[i]);\\n    \\tsize++;\\n  }\\n  arr[0] = size-1;\\n  writeHead();\\n  for(int i=0;i<size;i++)\\n  {\\n    writeSerial(arr[i]);\\n  }\\n  writeEnd();\\n  delay(100);\\n}\\nvoid OfflineBroadcast::broadcast(String msg,String value){\\n  uint8_t arr[50]={0,0,1,0x46,2,1};\\n  int len = msg.length();\\n  if(len==0){\\n    return;\\n  }\\n  int len2 = value.length();\\n  int size = 6;\\n  arr[5] = len;\\n  for(int i=0;i<len;i++){\\n      arr[size] = uint8_t(msg[i]);\\n      size++;\\n  }\\n  arr[size++] = len2;\\n  for(int i=0;i<len2;i++){\\n      arr[size++] = uint8_t(value[i]);\\n  }\\n  arr[0] = size-1;\\n  writeHead();\\n  for(int i=0;i<size;i++)\\n  {\\n    writeSerial(arr[i]);\\n  }\\n  writeEnd();\\n  delay(100);\\n}\\n\\nvoid OfflineBroadcast::readSensor(int device){\\n   /**************************************************\\n      ff    55      len idx action device type len name  \\n      0     1       2   3   4      5      6    7    8\\n      0xff  0x55   0x4 0x3 0x1    0x46    0x1  0x2  48 69\\n      -----------------------------------------------\\n      ff    55      len idx action device type len name len message\\n      0   1   2 3 4   5   6 7 8 9 10\\n  ***************************************************/\\n  int type;\\n  switch(device){\\n    case  BROADCAST:{\\n      type = readBuffer(6);\\n      // 无附加值\\n      if(type==1){\\n        int len = readBuffer(7);\\n        broadcastMsg = readString(8,len); \\n        broadcastValue = \\\"\\\";\\n      }\\n      // 有附加值\\n      else if(type==2){\\n        int nlen = readBuffer(7);\\n        broadcastMsg = readString(8,nlen);\\n        int vlen = readBuffer(7+nlen+1);\\n        broadcastValue = readString(7+nlen+2,vlen);\\n      }\\n      bool hasCallback = false;\\n      for(int i=0;i<MAX_LISTENER;i++){\\n        if(broadcastMsg.equals(listenList[i].msg)){\\n          listenList[i].callback();\\n          hasCallback = true;\\n        }\\n      } \\n      if(!hasCallback){\\n        callOK();\\n      }\\n    }\\n    break;\\n  }\\n}\\nvoid OfflineBroadcast::parseData(){\\n  isStart = false;\\n  int idx = readBuffer(3);\\n  command_index = (uint8_t)idx;\\n  int action = readBuffer(4);\\n  int device = readBuffer(5);\\n  switch(action){\\n    case GET:{\\n        readSensor(device);\\n     }\\n     break;\\n  }\\n}\\n\\nvoid OfflineBroadcast::writeBuffer(int index,unsigned char c){\\n  buffer[index]=c;\\n}\\nvoid OfflineBroadcast::writeHead(){\\n  writeSerial(0xff);\\n  writeSerial(0x55);\\n}\\nvoid OfflineBroadcast::writeEnd(){\\n Serial.println(); \\n}\\nvoid OfflineBroadcast::writeSerial(unsigned char c){\\n Serial.write(c);\\n}\\nchar _receiveStr[20] = {};\\nuint8_t _receiveUint8[16] = {};\\nString OfflineBroadcast::readString(int idx,int len){\\n  char p[50];\\n  for(int i=0;i<len;i++){\\n    p[i]=readBuffer(idx+i);\\n  }\\n  p[len] = '\\\\0';\\n  return String(p);\\n}\\nvoid OfflineBroadcast::callOK(){\\n    uint8_t arr[5]={4,0,1,0x46,3};\\n    writeHead();\\n    for(int i=0;i<5;i++)\\n    {\\n      writeSerial(arr[i]);\\n    }\\n    writeEnd();\\n}\\nvoid OfflineBroadcast::on(String msg,void(*callback)(void)){\\n  struct Listener listener;\\n  listener.msg = msg;\\n  listener.callback = callback;\\n  if(listenerP<MAX_LISTENER){\\n    listenList[listenerP++] = listener;\\n  }\\n}\\r\\n\" }",
    "{ filename: \"src/OfflineBroadcast.h\", code: \"#ifndef OfflineBoardcast_H\\n#define OfflineBoardcast_H\\n#include \\\"MeSerial.h\\\"\\n#include <Arduino.h>\\n\\n#define BROADCAST 70\\n#define GET 1\\n\\nclass OfflineBroadcast\\n{\\npublic:\\n\\tOfflineBroadcast(void);\\n\\tvoid loop();\\n\\tString broadcastMsg = \\\"\\\";\\n\\tString broadcastValue = \\\"\\\";\\n\\tvoid broadcast(String msg,String value);\\n  void broadcast(String msg);\\n  void callOK();\\n  void on(String msg,void(*callback)(void));\\nprivate:\\n  void readSensor(int device);\\n  unsigned char readBuffer(int index);\\n  void writeBuffer(int index,unsigned char c);\\n  void parseData();\\n  void writeEnd();\\n  void writeSerial(unsigned char c);\\n  void readSerial();\\n  String readString(int idx,int len);\\n  void writeHead();\\n};\\n#endif\\r\\n\" }"
];